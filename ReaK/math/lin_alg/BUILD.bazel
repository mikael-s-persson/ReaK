#
# Copyright 2024 Sven Mikael Persson
#

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

cc_library(
  name = "lin_alg",
  srcs = [],
  hdrs = [
    "arithmetic_tuple.h",
    "complex_math.h",
    "mat_alg_diagonal.h",
    "mat_alg_general.h",
    "mat_alg.h",
    "mat_alg_identity.h",
    "mat_alg_lower_triangular.h",
    "mat_alg_nil.h",
    "mat_alg_orthogonal.h",
    "mat_alg_permutation.h",
    "mat_alg_rectangular.h",
    "mat_alg_scalar.h",
    "mat_alg_skew_symmetric.h",
    "mat_alg_square.h",
    "mat_alg_symmetric.h",
    "mat_alg_upper_triangular.h",
    "mat_are_solver.h",
    "mat_balance.h",
    "mat_cholesky.h",
    "mat_comparisons.h",
    "mat_composite_adaptor.h",
    "mat_concepts.h",
    "mat_ctrl_decomp.h",
    "mat_damped_matrix.h",
    "mat_exp_methods.h",
    "mat_gaussian_elim.h",
    "mat_givens_rot.h",
    "mat_hess_decomp.h",
    "mat_householder.h",
    "mat_jacobi_method.h",
    "mat_norms.h",
    "mat_num_exceptions.h",
    "mat_num.h",
    "mat_operators.h",
    "mat_op_results.h",
    "mat_qr_decomp.h",
    "mat_schur_decomp.h",
    "mat_slices.h",
    "mat_star_product.h",
    "mat_svd_method.h",
    "mat_traits.h",
    "mat_transpose_view.h",
    "mat_vector_adaptor.h",
    "mat_views.h",
    "named_compound_records.h",
    "stride_iterator.h",
    "vect_alg.h",
    "vect_concepts.h",
    "vect_index_iterator.h",
    "vect_traits.h",
    "vect_views.h",
  ],
  deps = [
    "//ReaK/core/base",
  ],
)

cc_library(
  name = "lin_alg_matchers",
  hdrs = [
    "mat_matchers.h",
    "vect_matchers.h",
  ],
  deps = [
    ":lin_alg",
    "@com_google_googletest//:gtest",
  ],
)

cc_test(
  name = "vect_alg_test",
  srcs = [
    "vect_alg_test.cc",
  ],
  deps = [
    ":lin_alg",
    "@com_google_googletest//:gtest_main",
  ],
)

cc_test(
  name = "mat_alg_test",
  srcs = [
    "mat_alg_test.cc",
  ],
  deps = [
    ":lin_alg",
    ":lin_alg_matchers",
    "@com_google_googletest//:gtest_main",
  ],
)

cc_test(
  name = "mat_num_test",
  srcs = [
    "mat_num_test.cc",
  ],
  deps = [
    ":lin_alg",
    ":lin_alg_matchers",
    "@com_google_googletest//:gtest_main",
  ],
)

cc_test(
  name = "mat_are_test",
  srcs = [
    "mat_are_test.cc",
  ],
  data = [
    "carex_m/carex_data.txt",
    "darex_m/darex_data.txt",
  ],
  deps = [
    ":lin_alg",
    "@com_google_googletest//:gtest_main",
  ],
)

cc_binary(
  name = "mat_num_perf",
  srcs = [
    "mat_num_perf.cc",
  ],
  deps = [
    ":lin_alg",
    "@com_google_absl//absl/log",
  ],
)

# if(Python3_FOUND)
#   reak_cc_library(
#     NAME
#       py_lin_alg
#     SRCS
#       "py_vect_alg.cc"
#     DEPS
#       ReaK::lin_alg
#       ${PYTHON_LIBRARIES}
#       ${Boost_LIBRARIES}
#       ${EXTRA_SYSTEM_LIBS}
#     PUBLIC
#   )
# endif()
